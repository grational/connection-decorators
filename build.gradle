/*
 * This build file was auto generated by 'gigawatt'
 * @author gsus
 * @date 17-11-2016 11.14
 */

// [plugins] this block must be the first
plugins {
	// support for groovy
	id 'groovy'
	// autogenerate eclipse project files
	id 'eclipse'
	// create and html index linking every report generated
	id 'build-dashboard'
	// view of the project (jars used, navigable source tree)
	id 'project-report'
	// groovy code linter
	id 'codenarc'
	// test code coverage plugin
	id 'net.saliman.cobertura' version '2.3.2'
	// integration with nexus repository (and more)
	id 'maven'
}

// [general] configuration
project.ext {
	groovyVersion     = '2.4.7'
	gradleVersion     = '3.2'
	spockVersion      = '1.0-groovy-2.4'
	cglibVersion      = '3.2.4'
	objenesisVersion  = '2.4'
	codenarcVersion   = '0.24.1'
	slf4jVersion      = '1.7.21'
	cacheDecVersion   = '0.3.0'
}

project.with {
	//project.name is set in the settings.gradle with rootProject.name
	group                 'it.italiaonline.rnd'
	version               '0.11.1' // (remove -SNAPSHOT for releases)
	description           'Provide functionalities as caching and retrying to any URL connection.'
	wrapper.gradleVersion "$gradleVersion"
}

// target java 7
allprojects {
	sourceCompatibility = 7
	targetCompatibility = 7
}

repositories {
	jcenter()

	maven { url "https://jitpack.io" }
}

dependencies {
	// Groovy language support
	compile "org.codehaus.groovy:groovy-all:$groovyVersion"

	// Slf4j dependencies with log4j2 backend
	compile "org.slf4j:slf4j-api:$slf4jVersion"

	// jitpack package
	compile "com.github.grational:cache-decorators:$cacheDecVersion"

	// We use the awesome Spock testing and specification framework
	testCompile "org.spockframework:spock-core:$spockVersion"
	testCompile "cglib:cglib-nodep:$cglibVersion"
	testCompile "org.objenesis:objenesis:$objenesisVersion"
}

// codenarc groovy source analyses
codenarc{
	toolVersion = "$codenarcVersion"

	codenarcMain {
		configFile = rootProject.file('config/codenarc/ruleset.groovy')
		exclude "**/package-info.*"
		ignoreFailures true       // does not block builds
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
	codenarcTest {
		configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
		ignoreFailures true
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
}

// [tasks] configuration //
jar {
	// execute check task when create the jar
	dependsOn 'check'
}

check {
	// clean before check
	dependsOn 'clean'
	// create the code coverage report
	dependsOn 'cobertura'
	// set the correct order for the dep tasks
	tasks.findByName('cobertura').mustRunAfter 'clean'
}

// [tasks] definition
task listJars {
	description = 'print out the jars used by the project'
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

// vim: ft=groovy:fdm=indent
